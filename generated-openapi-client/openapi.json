{
  "openapi": "3.0.3",
  "info": {
    "title": "Trieve API",
    "description": "Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.",
    "contact": {
      "name": "Trieve Team",
      "url": "https://trieve.ai",
      "email": "developers@trieve.ai"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/devflowinc/actix-web-template/blob/main/LICENSE.txt"
    },
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "http://localhost:8090",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/api/api_key": {
      "post": {
        "tags": [
          "api_key"
        ],
        "summary": "Set User Api Key",
        "description": "Set User Api Key\n\nCreate a new api key for the auth'ed user. Successful response will contain the newly created api key. The api key will have permission level of the auth'ed user who calls this endpoint.",
        "operationId": "create_api_key",
        "requestBody": {
          "description": "JSON request payload to create a new user api key",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiKeyReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "JSON body representing the api_key for the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateApiKeyRespPayload"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          },
          "500": {
            "description": "Service error relating to creating api_key for the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/auth": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "description": "Login\n\nThis will redirect you to the OAuth provider for authentication with email/pass, SSO, Google, Github, etc.",
        "operationId": "login",
        "parameters": [
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "URL to redirect to after successful login",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "inv_code",
            "in": "query",
            "description": "Code sent via email as a result of successful call to send_invitation",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          }
        ],
        "responses": {
          "303": {
            "description": "Response that redirects to OAuth provider through a Location header to be handled by browser."
          },
          "400": {
            "description": "OAuth error likely with OIDC provider.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "description": "Logout\n\nInvalidate your current auth credential stored typically stored in a cookie. This does not invalidate your API key.",
        "operationId": "logout",
        "parameters": [
          {
            "name": "redirect_uri",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Confirmation that your current auth token has been invalidated. This does not invalidate your API key."
          },
          "401": {
            "description": "The user is already logged out / does not have an account"
          }
        }
      }
    },
    "/api/auth/callback": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "OpenID Connect callback",
        "description": "OpenID Connect callback\n\nThis is the callback route for the OAuth provider, it should not be called directly. Redirects to browser with set-cookie header.",
        "operationId": "callback",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "303": {
            "description": "Response that returns with set-cookie header"
          },
          "400": {
            "description": "Email or password empty or incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/whoami": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get Currently Auth'ed User",
        "description": "Get Currently Auth'ed User\n\nGet the currently auth'ed user. This will return the user object for the currently auth'ed user.",
        "operationId": "whoami",
        "responses": {
          "200": {
            "description": "JSON body containing the user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting the currently auth'ed user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/health": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Health Check",
        "description": "Health Check\n\nConfirmation that the service is healthy",
        "operationId": "health_check",
        "responses": {
          "200": {
            "description": "Confirmation that the service is healthy"
          },
          "400": {
            "description": "Service error relating to overall service health",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        }
      }
    },
    "/api/invitation": {
      "post": {
        "tags": [
          "invitation"
        ],
        "summary": "Send Invitation",
        "description": "Send Invitation\n\nInvitations act as a way to invite users to join an organization. After a user is invited, they will automatically be added to the organization with the role specified in the invitation once they set their.",
        "operationId": "post_invitation",
        "parameters": [
          {
            "name": "TR-Organization",
            "in": "header",
            "description": "The organization id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to send an invitation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitationData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Ok response. Indicates that invitation email was sent correctly."
          },
          "400": {
            "description": "Invalid email or some other error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "admin"
            ]
          }
        ]
      }
    },
    "/api/invitation/{invitation_id}": {
      "delete": {
        "tags": [
          "invitation"
        ],
        "summary": "Delete Invitation",
        "description": "Delete Invitation\n\nDelete an invitation by id.",
        "operationId": "delete_invitation",
        "parameters": [
          {
            "name": "invitation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok response. Indicates that invitation was deleted."
          },
          "400": {
            "description": "Service error relating to deleting invitation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "admin"
            ]
          }
        ]
      }
    },
    "/api/invitation/{organization_id}": {
      "get": {
        "tags": [
          "invitation"
        ],
        "summary": "Get Invitations",
        "description": "Get Invitations\n\nGet all invitations for the organization.",
        "operationId": "get_invitations",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invitations for the dataset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invitation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Service error relating to getting invitations for the dataset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "admin"
            ]
          }
        ]
      }
    },
    "/api/orgs": {
      "get": {
        "tags": [
          "orgs"
        ],
        "operationId": "get_orgs_for_authed_user",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of results. Default is 10",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the results. Default is 0",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of organizations the user belongs to",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Org"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "orgs"
        ],
        "operationId": "create_org",
        "requestBody": {
          "description": "JSON request payload to create a new organization",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrgReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "JSON body representing the organization that was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    },
    "/api/orgs/{org_id}": {
      "put": {
        "tags": [
          "orgs"
        ],
        "operationId": "update_org",
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "JSON request payload to rename the organization",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgReqPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Object representing the renamed organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "orgs"
        ],
        "operationId": "delete_org",
        "parameters": [
          {
            "name": "Organization",
            "in": "header",
            "description": "The organization id to use for the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content response indicating that the organization was successfully deleted"
          },
          "401": {
            "description": "Service error relating to authentication status of the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorRespPayload"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": [
              "readonly"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CreateApiKeyReqPayload": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name which will be assigned to the new api key."
          }
        }
      },
      "CreateApiKeyRespPayload": {
        "type": "object",
        "required": [
          "api_key"
        ],
        "properties": {
          "api_key": {
            "type": "string",
            "description": "The api key which was created. This is the value which should be used in the Authorization header."
          }
        }
      },
      "CreateOrgReqPayload": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ErrorRespPayload": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "example": {
          "message": "Bad Request"
        }
      },
      "Invitation": {
        "type": "object",
        "required": [
          "id",
          "email",
          "organization_id",
          "used",
          "created_at",
          "updated_at",
          "role"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "role": {
            "type": "integer",
            "format": "int32"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "used": {
            "type": "boolean"
          }
        }
      },
      "InvitationData": {
        "type": "object",
        "required": [
          "organization_id",
          "user_role",
          "email",
          "app_url",
          "redirect_uri"
        ],
        "properties": {
          "app_url": {
            "type": "string",
            "description": "The url of the app that the user will be directed to in order to set their password. Usually admin.trieve.ai, but may differ for local dev or self-hosted setups."
          },
          "email": {
            "type": "string",
            "description": "The email of the user to invite. Must be a valid email as they will be sent an email to register."
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the organization to invite the user to."
          },
          "redirect_uri": {
            "type": "string",
            "description": "The url that the user will be redirected to after setting their password."
          },
          "user_role": {
            "type": "integer",
            "format": "int32",
            "description": "The role the user will have in the organization. 0 = User, 1 = Admin, 2 = Owner."
          }
        }
      },
      "InvitationResponse": {
        "type": "object",
        "required": [
          "registration_url"
        ],
        "properties": {
          "registration_url": {
            "type": "string"
          }
        }
      },
      "Org": {
        "type": "object",
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "created_at": "2021-01-01T00:00:00",
          "id": "e3e3e3e3-e3e3-e3e3-e3e3-e3e3e3e3e3e3",
          "name": "Trieve Team",
          "updated_at": "2021-01-01T00:00:00"
        }
      },
      "UpdateOrgReqPayload": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "email",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "created_at": "2021-01-01T00:00:00",
          "email": "developers@trieve.ai",
          "id": "e3e3e3e3-e3e3-e3e3-e3e3-e3e3e3e3e3e3",
          "name": "Trieve Team",
          "updated_at": "2021-01-01T00:00:00"
        }
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  },
  "tags": [
    {
      "name": "auth",
      "description": "Authentication endpoints. Used to authenticate users."
    },
    {
      "name": "invitation",
      "description": "Invitation endpoint. Exists to invite users to an organization."
    },
    {
      "name": "orgs",
      "description": "Organization endpoints. Used to manage organizations"
    },
    {
      "name": "api_key",
      "description": "API Key endpoints. Used to manage user API keys."
    },
    {
      "name": "health",
      "description": "Health check endpoint. Used to check if the server is up and running."
    }
  ]
}
